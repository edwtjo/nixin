#!/bin/sh

# A high level NixOS helper script
#
# This script is a complete HACK it isn't intended to be
# elegant, just useful.

die() {
    echo $1
    exit 1
}

isRepo() {
  export GIT_DIR=$NIXPKGS_REPO/.git
  git remote --verbose show | grep "github.com.NixOS/nixpkgs.*fetch" > .remotes-info
  read remote url type < .remotes-info
  rm -f .remotes-info
  unset GIT_DIR
  [ -n "$remote" ] && return 0 || return 1;
}

[ -z $NIXPKGS_REPO ] && die "You need to set NIXPKGS_REPO in your environment"
[ ! isRepo ] && die "NIXPKGS_REPO isn't pointing to a nixpkgs checkout"
export NIX_PATH="nixpkgs=$NIXPKGS_REPO:nixos=$NIXPKGS_REPO/nixos:$NIX_PATH"

# pkgName columnOffset
pkgName() {
  awk -F'-' "
  {
    printf \$$1
    for(i=$(($1+1)); i<=NF; i++) {
      if(!match(\$i, /[0-9]+.*/)) {
        printf \"-%s\", \$i
      }
    }
    print \"\"
  }
  "
}

hasExe() {
  ret=1
  for bp in $(echo $PATH | sed -e "s/:/ /g"); do [ -e $bp/$1 ] && ret=0;done
  return $ret
}

bootSha() {
  systemSha booted
}

currentSha() {
  systemSha current
}

systemSha() {
  ls -ld /run/$1-system|awk -F'.' '{print $4}'
}

toRepo() {
  cd $NIXPKGS_REPO 2>&- >&-
}

fromDir() {
  cd - 2>&- >&-
}

repoPosition() {
  cat $NIXPKGS_REPO/.git/refs/heads/$1 | cut -b -7
}

checkoutRepo() {
  local sha=$1
  local pos=$(repoPosition master)
  local repoOwner=$(dirOwner $NIXPKGS_REPO)
  local repoGroup=$(dirGroup $NIXPKGS_REPO)
  toRepo
  echo "$pos"
  sudo git checkout $sha 2>&- >&- || exit 1
  sudo chown $repoOwner:$repoGroup -R $NIXPKGS_REPO/.git 2>&- >&-
  fromDir
}

toBootRepo() {
  checkoutRepo $(bootSha)
}

toCurrRepo() {
  checkoutRepo $(currentSha)
}

dirOwner() {
  ls -dl . | awk '{print $3}'
}

dirGroup() {
  ls -dl . | awk '{print $4}'
}

getProxySetting() {
  nixos-option nix.proxy | awk 'f{print;f=0} /Value/{f=1}' | tr -d \"
}

setProxy() {
  export NIX_REMOTE=""
  export http_proxy=$1
  export https_proxy=$1
  export ftp_proxy=$1
  sudo sed --follow-symlinks -i -e "/proxy/d" /etc/nixos/configuration.nix
  sudo sed --follow-symlinks -i -e "\$i\ \ nix\.proxy \= \""$1"\"\;" /etc/nixos/configuration.nix
  sudo -E nix-build -I nixpkgs=$NIXPKGS_REPO -A system "<nixpkgs/nixos>" --option use-binary-caches false
  updateSystem --option use-binary-caches false
  export NIX_REMOTE="daemon"
}

unsetProxy() {
  export NIX_REMOTE=""
  export http_proxy=""
  export https_proxy=""
  export ftp_proxy=""
  sudo sed --follow-symlinks -i -e "/proxy/d" /etc/nixos/configuration.nix
  sudo -E nix-build -I nixpkgs=$NIXPKGS_REPO -A system "<nixpkgs/nixos>" --option use-binary-caches false
  updateSystem --option use-binary-caches false
  export NIX_REMOTE="daemon"
}

packStore() {
  sudo nix-store --optimize
}

cleanOld() {
  sudo nix-collect-garbage -d
  packStore
}

clearMyUserProfile() {
  nix-env -e '*'
}

clearOtherUserProfile() {
  sudo [ -L "/nix/var/nix/profiles/per-user/$1/profile" ] && nix-env -p /nix/var/nix/profiles/per-user/$1/profile -e '*'
}

clearSystemProfile() {
  sudo nix-env -p /nix/var/nix/profiles/system -e '*'
}

clearOtherSystemProfile() {
  local storePath=$(readlink /nix/var/nix/profiles/system-profiles/$1)
  if [ "$(dirname $storePath)" = "." ]
  then
    clearOtherUserProfile $(basename storePath)
    sudo rm $storePath
  else
    sudo nix-store --delete $storePath
    sudo nix-store --gc
  fi
}

listSystemInstalledPkgs() {
  nix-store -q --references /var/run/current-system/sw | pkgName 2 | sort
}

listMyInstalledPkgs() {
  nix-env -q '*' | pkgName 1 | sort
}

listUserInstalledPkgs() {
  [ -L "/nix/var/nix/profiles/per-user/$1/profile" ] && sudo nix-env -p /nix/var/nix/profiles/per-user/$1/profile -q '*' | pkgName 1 | sort
}

repairBrokenDerivations() {
  sudo NIX_REMOTE= nix-store --verify --check-contents --repair
}

repairBrokenGhcPkgs() {
  echo <<EOF
WARNING!!!!
WARNING!!!!

THIS WILL FUCK YOU UP IF YOU INCLUDE ANY GHC
DEPENDENT PACKAGES IN YOUR SYSTEM PROFILE!!!

WARNING!!!!
WARNING!!!!
EOF
  sleep 60s
  sudo nix-store --delete /nix/store/*-ghc-* --ignore-liveness
  sudo nix-collect-garbage -d
  echo "Now you will probably need to rebuild using: --option build-use-substitutes false"
}

repairBrokenGrub() {
  sudo mount /boot 2>&- >&-
  local system=$(bootSha)
  local systemDir=$(readlink /var/run/booted-system)
  local systemNr=$(sudo grep -E "Configuration.*$system" /boot/grub/grub.cfg | awk '{print $5}' | sort -u | tail -n 1)
  [ ! -L /nix/var/nix/profiles/system-$systemNr-link ] \
      && sudo ln -s $systemDir /nix/var/nix/profiles/system-$systemNr-link
  echo "Latest boot was $system($systemNr), resetting current to booted system profile and rebuilding"
  sudo nix-env -p /nix/var/nix/profiles/system -G $systemNr \
      && cleanOld \
      && updateSystem
}

listMyGenerations() {
  nix-env --list-generations
}

listUserGenerations() {
  sudo nix-env -p /nix/var/nix/profiles/per-user/$1/profile --list-generations
}

listSystemGenerations() {
  sudo nix-env -p /nix/var/nix/profiles/system --list-generations
}

getNixVersion() {
  sudo nix-env --version | awk '{print $3}'
}

updateNix() {
  local nixUrl=$(curl http://hydra.nixos.org/job/nix/master/build.x86_64-linux/latest | awk -F'"' '/build/{print $2}')
  local nixVers=$(curl $nixUrl | awk -F'-' '/.nix.store.*.drv/{print substr($3,0,length($3)-14)}')
  local nixClosure=$nixVers.closure.gz
  local buildNr=$(echo $nixUrl | awk -F'/' '{print $5}')
  local hash=$(echo $nixVers | awk -F'_' '/.nix.store.*.drv/{print substr($2,0,7)}')
  if [ "$(getNixVersion)" != "$nixVers" ]
  then
      [ ! -f /tmp/nix-$nixClosure ] && wget http://hydra.nixos.org/build/$buildNr/nix/closure/$nixClosure -O /tmp/nix-$nixClosure
      local nixStorePath=$(cat /tmp/nix-$nixClosure | gunzip | sudo nix-store --import | awk '/.*-nix.*/{print $1}')
      sudo nix-env -i $nixStorePath
  fi
}

updateSystem() {
  updateNix
  sudo -E nixos-rebuild -I nixpkgs=$NIXPKGS_REPO -I nixos=$NIXPKGS_REPO/nixos switch --fallback $@
}

upgradeSystem() {
  sudo nix-channel --add https://nixos.org/channels/nixos-$1/ nixos
  sudo nixos-rebuild switch --upgrade
}

justFetches() {
  nix-build -k $NIXPKGS_REPO --option build-chroot-dirs '/bin=/var/empty/ /nix/store=/var/empty /dev' --option binary-caches ''
}

buildVM() {
  if [ -z "$1" ];then
    die <<EOF
Please provide a VM configuration
---------------------------------
 {config, pkgs, ...}:
 {
   # You need to configure a root filesytem
   fileSystems."/".label = "vmdisk";

   # The test vm name is based on the hostname, so it's nice to set one
   networking.hostName = "vmhost";

   # Add a test user who can sudo to the root account for debugging
   users.extraUsers.vm = {
     password = "vm";
     shell = "${pkgs.bash}/bin/bash";
     group = "wheel";
   };
   security.sudo = {
     enable = true;
     wheelNeedsPassword = false;
   };

   # Enable your new service!
   services =  {
     myNewService = {
       enable = true;
     };
   };
 }
EOF
  else
      NIXOS_CONFIG=`readlink -f $1` nixos-rebuild -I nixpkgs=$NIXPKGS_REPO -I nixos=$NIXPKGS_REPO/nixos build-vm
  fi
}

syncRepo() {
  cd $NIXPKGS_REPO
  IFS="/" read refs heads branch < $NIXPKGS_REPO/.git/HEAD
  git remote --verbose show | grep "github.com.NixOS/nixpkgs.*fetch" > .remotes-info
  read remote url type < .remotes-info
  rm -f .remotes-info
  git fetch $remote
  git rebase $remote/master $branch
  cd -
}

switchToProfile() {
  unset NIX_REMOTE
  sudo nixos-rebuild -p $1 switch
}

findPackage() {
  nix-env -qa \* -P -f $NIXPKGS_REPO | grep $1
}

buildPackage() {
  nix-build -f $NIXPKGS_REPO -A $1 --argstr system $2
}

build64BitPackage() {
  buildPackage $1 "x86_64-linux"
}

build32BitPackage() {
  buildPackage $1 "i686-linux"
}

installPackage() {
  nix-env -f $NIXPKGS_REPO --fallback -i "$@"
}

installPackageAttr() {
  installPackage -A "$@"
}

installPackageIntoProfile() {
  local profile=$1
  shift
  sudo nix-env -f $NIXPKGS_REPO -p /nix/var/nix/profiles/$profile -iA "$@"
}

installIntoCurrentSystem() {
  installPackageIntoProfile system $@
}

removePackage() {
  nix-env -e "$@"
}

startRepl() {
  hasExe nix-repl
  if [ $? -ne 0 ];then
    installPackage nix-repl
  fi
  nix-repl $NIXPKGS_REPO $NIXPKGS_REPO/nixos
}

startShell() {
  nix-shell
}

listSystemProfiles() {
  for profile in /nix/var/nix/profiles/system-profiles/*;do
    echo `basename $profile` | awk -F'-' '{print $1}'
  done | uniq | sort
}

listUserProfiles() {
  if [ -e /nix/profiles/per-user/$1/* ];then
    for profile in /nix/var/nix/profiles/per-user/$1/*;do
      echo `# $profile`
    done
  else
    echo "no profiles recorded"
  fi
}

listLatestHydra() {
  curl -sI http://nixos.org/channels/nixpkgs-$1 | grep Location | cut -d'.' -f4
}

listLatestUnstable() {
  listLatestHydra unstable
}

listAllProfiles() {
  echo "# system profiles"
  listSystemProfiles
  echo
  for usr in /nix/var/nix/profiles/per-user/*;do
    echo "# `basename $usr`'s profiles"
    listUserProfiles $usr
    echo ""
  done
}

usage() {
    cat <<EOF
nixin operations:
  (repl)                                        --  Initiate nixos/nixpkgs REPL session
  ([u]pdate)                                    --  Update system configuration
  ([s]ync)                                      --  Sync package and operatingsystem expressions
  ([i]nstall) PKG                               --  Install PKG, as current user
  ([d]elete) PKG                                --  Remove PKG, as current user
  ([f]ind) PKG                                  --  Search/Grep for PKG
  ([l]ist) [([u]ser USER|[s]ystem [NAME])]      --  List installed packages in sytem or user profile
  ([c]lear) [([u]ser USER|[s]ystem [NAME])]     --  Clear current user profile or specific system profile
  ([r]epair) ([d]erivations|[g]hcs)             --  Repair broken packages, both system derivation and user ghc-pkgs
  ([p]roxy) [URL]                               --  Set or unset the NixOS system proxy, assumes correct alterations of configuration.nix
EOF
}

case $1 in
    repl )
        startRepl
        ;;
    u | update )
        updateSystem
        ;;
    bv | build-vm )
        shift
        buildVM $1
        ;;
    s | sync )
        syncRepo
        ;;
    i | install )
        shift
        installPackageAttr $1
        ;;
    b | build )
        shift
        case $1 in
            32 | i686 )
                shift
                build32BitPackage $1
                ;;
            64 | x64 )
                shift
                build64BitPackage $1
                ;;
            * )
                buildPackage $1 $2
                ;;
        esac
        ;;
    d | delete )
        removePackage $1
        ;;
    f | find )
        shift
        findPackage $1
        ;;
    g | grab )
        justFetches
        ;;
    l | list)
        shift
        case $1 in
            s | sys | system )
                shift
                listSystemInstalledPkgs
                ;;
            u | usr | user )
                shift
                listUserInstalledPkgs $1
                ;;
            h | hydra )
                listLatestUnstable
                ;;
            p | proxy )
                prx=$(getProxySetting)
                [ -z "$prx" ] && echo "No proxy set" || echo $prx
                ;;
            * )
                listMyInstalledPkgs
                ;;
        esac
        ;;
    lp | list-profile )
        shift
        case $1 in
          s | sys | system )
            shift
            listSystemProfiles
            ;;
          u | usr | user )
            shift
            listUserProfiles $1
            ;;
          * )
            listAllProfiles
            ;;
        esac
        ;;
    p | proxy )
        shift
        case $1 in
            http://* )
                echo "Setting proxy to: $1"
                lastPos=$(toCurrRepo)
                setProxy $1
                checkoutRepo $lastPos
                ;;
            * )
                echo "Unsetting proxy"
                lastPos=$(toCurrRepo)
                unsetProxy
                checkoutRepo $lastPos
                ;;
        esac
        ;;
    pu | proxy-update )
        shift
        case $1 in
            http://* )
                echo "Setting proxy to: $1"
                setProxy $1
                ;;
            * )
                echo "Unsetting proxy"
                unsetProxy
                ;;
        esac
        ;;
    c | clear )
        shift
        case $1 in
            s | sys | system )
                shift
                if [ -z "$1" ];then
                    clearSystemProfile
                else
                    clearOtherSystemProfile $1
                fi
                ;;
            u | usr | user )
                shift
                if [ -z "$1" ];then
                    clearMyUserProfile
                else
                    clearOtherUserProfile $1
                fi
                ;;
            * )
                clearMyUserProfile
                ;;
        esac
        ;;
    r | repair )
        shift
        case $1 in
            d | derivation )
                repairBrokenDerivations
                ;;
            g | ghcs )
                repairBrokenGhcPkgs
                ;;
            r | grub )
                repairBrokenGrub
                ;;
            * )
                echo "Please provide a scope ([d]erivations|[g]hcs|g[r]ub)"
                ;;
        esac
        ;;
    sh | shell )
        startShell
        ;;
    pack )
        packStore
        ;;
    * )
        getProxySetting
        usage
        ;;
esac
